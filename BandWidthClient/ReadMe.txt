========================================================================
    控制台应用程序：BandWidthClient 项目概述
========================================================================


程序描述

分客户端和服务端，采用套接字同步操作，服务端直接循环监听请求连接的客户端

现有功能

根据发送（/接收）一定量数据所消耗的时间得出从客户端到服务端的速率
根据一定的时间所发送（/接收）的数据量得出网络速率

			时间  数据量

发送

接收







应用程序向导已为您创建了此 BandWidthClient 应用程序。

本文件概要介绍组成 BandWidthClient 应用程序的每个文件的内容。


BandWidthClient.vcxproj
    这是使用应用程序向导生成的 VC++ 项目的主项目文件，
    其中包含生成该文件的 Visual C++ 
    的版本信息，以及有关使用应用程序向导选择的平台、配置和项目功能的信息。

BandWidthClient.vcxproj.filters
    这是使用“应用程序向导”生成的 VC++ 项目筛选器文件。 
    它包含有关项目文件与筛选器之间的关联信息。 在 IDE 
    中，通过这种关联，在特定节点下以分组形式显示具有相似扩展名的文件。
    例如，“.cpp”文件与“源文件”筛选器关联。

BandWidthClient.cpp
    这是主应用程序源文件。

/////////////////////////////////////////////////////////////////////////////
其他标准文件：

StdAfx.h，StdAfx.cpp
    这些文件用于生成名为 BandWidthClient.pch 的预编译头 (PCH) 文件和
    名为 StdAfx.obj 的预编译类型文件。

/////////////////////////////////////////////////////////////////////////////
其他注释：

应用程序向导使用“TODO:”注释来指示应添加或自定义的源代码部分。

/////////////////////////////////////////////////////////////////////////////





				if(isTimeEvn)
				{
					printf("%s [T-Receive] 0.0-%.1lf sec  %.1lf MBytes, Rate: %.1lf Mbits/sec\n", 
						toString().c_str(), dSentTime / 1000, fSentSize / 1024 / 1024, fSentSize / 1000 * 8 / dSentTime);
				}
				else
				{
					printf("%s [N-Receive] 0.0-%.1lf sec  %.1lf MBytes, Rate: %.1lf Mbits/sec\n", 
						toString().c_str(), dSentTime / 1000, fSentSize / 1024 / 1024, fSentSize / 1000 * 8 / dSentTime);
				}
				//cout << toString() <<"  [Receive] 0-" << m_stTime << " sec  " << fSentSize / 1024 / 1024 << " MBytes, Rate: " << fSentSize / 1024 / 1024 * 8 / m_stTime << " MBits/sec" << endl;
				
				
				
需处理Ping过程中一直出现超时情况时将将缓冲区占满的情况				
				
修改服务端的显示数据格式
删除等待接收线程，通过SetSocketOpt设置超时时间
修改计时函数

数据从客户端发送到服务端，服务端收到客户尾部信息后会发送已接收字节数等信息会服务端
数据从服务端发送到客户端，当发送完毕时服务端发送服务端头部回客户端

记录时间方式，
客户端-》服务端：是从对方返回确认消息后记录结束时间
服务端-》客户端，是从客户端第一次接收到消息时开始计时



如果采用异步：

客户端发送首指令 表明测速的方式，缓冲区大小、发送的方式（按时间还是按照数量）
客户端进入到一种状态
服务端发送确认信息后，进入到准备状态，发送或接收字节
收到服务端返回的确认
客户端进入另一种状态，开始发送或接收字节

客户端发送，服务端接收：
    客户端发送完毕后，需要发送发送完毕确认信息，服务器接收信息时需随时准备接收到客户端的结束信息，
    服务端收到客户端的结束发送信息后，需要发送相关信息（已接收字节数，接收时间长度）回客户端，
    客户端收到确认信息后打印信息；

客户端接收，服务端发送：
    服务端发送完毕后，发送发送完毕确认信息并附带相关信息（已发送字节数，发送时间长度），客户端收到
    确认信息后直接打印信息，不再返回信息到服务端
    
    
现在的问题是：


何时计算
    


